#!/bin/sh

########################################################################
#                                                                      #
# This file is part of Indi's EPUB Makefile project.                   #
#                                                                      #
# Indi's EPUB Makefile project is free software: you can               #
# redistribute it and/or modify it under the terms of the              #
# GNU General Public License as published by the                       #
# Free Software Foundation, either version 3 of the License,           #
# or (at your option) any later version.                               #
#                                                                      #
# Indi's EPUB Makefile project is distributed in the hope that         #
# it will be useful, but WITHOUT ANY WARRANTY; without even            #
# the implied warranty of MERCHANTABILITY or                           #
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License #
# for more details.                                                    #
#                                                                      #
# You should have received a copy of the GNU General Public License    #
# along with Indi's EPUB Makefile project.                             #
# If not, see <https://www.gnu.org/licenses/>.                         #
#                                                                      #
########################################################################


set -e
set -u


# Support colourization ################################################

format_reset=

format_bold=

format_fg_cyan=
format_fg_green=
format_fg_red=

report()
{
	printf '%s%s%s\n' "${format_bold}" "${*}" "${format_reset}"
}

report_test()
{
	report "${format_fg_cyan}[TEST]:" "${@}"
}

report_pass()
{
	report "${format_fg_green}[PASS]:" "${@}"
}

report_fail()
{
	report "${format_fg_red}[FAIL]:" "${@}"
}

report_result()
{
	report "${format_fg_cyan}[RESULT]:" "${@}"
}

if [ -t 1 ]
then
	colours=$(tput colors)

	if [ -n "${colours}" ] && [ "${colours}" -ge 8 ]
	then
		format_reset=$(tput sgr0)

		format_bold=$(tput bold)

		format_fg_cyan=$(tput setaf 6)
		format_fg_green=$(tput setaf 2)
		format_fg_red=$(tput setaf 1)
	fi
fi


# Keep track of number of tests passed and failed ######################

tests_passed=0
tests_failed=0


# For each directory that has a valid test name (and a 'run-test' exe),
# run the test.

for d in */
do
	# Strip trailing slash.
	d="${d%/}"

	# If no directories were found, then 'd' will be '*'. Skip it.
	if [ "${d}" = '*' ]
	then
		continue
	fi

	# Check that the directory has a valid test name.
	if printf '%s' "${d}" | grep -q '^[a-z][a-z0-9]*\(-[a-z0-9]\+\)*$'
	then
		# Check that a 'run-test' executable exists.
		if [ -f "${d}/run-test" ] && [ -x "${d}/run-test" ]
		then
			# Run the test.
			report_test "${d}"
			if ( cd -- "${d}" && ./run-test )
			then
				report_pass "${d}"
				tests_passed=$(expr "${tests_passed}" + 1)
			else
				report_fail "${d}"
				tests_failed=$(expr "${tests_failed}" + 1)
			fi
		fi
	fi
done


# Print the results of all tests #######################################

if [ "${tests_passed}" = 0 ] && [ "${tests_failed}" = 0 ]
then
	report_result 'No tests.'
elif [ "${tests_failed}" = 0 ]
then
	report_result "${format_fg_green}All tests passed."
elif [ "${tests_passed}" = 0 ]
then
	report_result "${format_fg_red}All tests failed; ${tests_failed} failures."
else
	report_result "All tests complete: ${format_fg_green}${tests_passed} passed${format_fg_cyan}; ${format_fg_red}${tests_passed} failed${format_fg_cyan}."
fi
